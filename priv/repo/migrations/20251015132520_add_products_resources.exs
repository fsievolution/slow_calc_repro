defmodule App.Repo.Migrations.AddProductsResources do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:products, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :name, :text, null: false
      add :status, :text, default: "draft"

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:images, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :path, :text, null: false
      add :stored_env, :text, null: false, default: "prod"
      add :sort_order, :bigint, null: false, default: 0

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :product_id,
          references(:products,
            column: :id,
            name: "images_product_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create table(:image_crops, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :x_start, :bigint, null: false, default: 0
      add :y_start, :bigint, null: false, default: 0
      add :x_end, :bigint, null: false, default: 0
      add :y_end, :bigint, null: false, default: 0

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :image_id,
          references(:images,
            column: :id,
            name: "image_crops_image_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    create unique_index(:image_crops, [:image_id], name: "image_crops_one_crop_per_image_index")
  end

  def down do
    drop_if_exists unique_index(:image_crops, [:image_id],
                     name: "image_crops_one_crop_per_image_index"
                   )

    drop constraint(:image_crops, "image_crops_image_id_fkey")

    drop table(:image_crops)

    drop constraint(:images, "images_product_id_fkey")

    drop table(:images)

    drop table(:products)
  end
end
